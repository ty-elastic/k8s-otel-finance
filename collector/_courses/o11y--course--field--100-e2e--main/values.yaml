# For installation and configuration options, refer to the [installation instructions](https://github.com/elastic/opentelemetry/blob/main/docs/kubernetes/operator/README.md)

# For advanced configuration options, refer to the [official OpenTelemetry Helm chart](https://github.com/open-telemetry/opentelemetry-helm-charts/blob/main/charts/opentelemetry-kube-stack/values.yaml)
# This file has been tested together with opentelemetry-kube-stack helm chart version: 0.3.3
opentelemetry-operator:
  manager:
    extraArgs:
      - --enable-go-instrumentation
  admissionWebhooks:
    certManager:
      enabled: false # For production environments, it is [recommended to use cert-manager for better security and scalability](https://github.com/open-telemetry/opentelemetry-helm-charts/tree/main/charts/opentelemetry-operator#tls-certificate-requirement).
    autoGenerateCert:
      enabled: true # Enable/disable automatic certificate generation. Set to false if manually managing certificates.
      recreate: true # Force certificate regeneration on updates. Only applicable if autoGenerateCert.enabled is true.
crds:
  create: true # Install the OpenTelemetry Operator CRDs.
defaultCRConfig:
  image:
    repository: "docker.elastic.co/elastic-agent/elastic-agent"
    tag: "9.1.2"
  targetAllocator:
    enabled: false # Enable/disable the Operator's Target allocator.
    # Refer to: https://github.com/open-telemetry/opentelemetry-operator/tree/main/cmd/otel-allocator
clusterRole:
  rules:
    - apiGroups: [""]
      resources: ["configmaps"]
      verbs: ["get"]
# `clusterName` specifies the name of the Kubernetes cluster. It sets the 'k8s.cluster.name' field.
# Cluster Name is automatically detected for EKS/GKE/AKS. Add the below value in environments where cluster name cannot be detected.
# clusterName: myClusterName
collectors:
  cluster:
  #  Daemon is a K8s daemonset EDOT collector focused on gathering telemetry at
  #  node level and exposing an OTLP endpoint for data ingestion.
  #  Auto-instrumentation SDKs will use this endpoint.
  daemon:
    fullnameOverride: "opentelemetry-kube-stack-daemon"
    env:
      # Work around for open /mounts error: https://github.com/open-telemetry/opentelemetry-collector-contrib/issues/35990
      - name: HOST_PROC_MOUNTINFO
        value: ""
      - name: ELASTIC_AGENT_OTEL
        value: '"true"'
    volumeMounts:
      - name: varlogpods
        mountPath: /var/log/pods
        readOnly: true
    volumes:
      - name: varlogpods
        hostPath:
          path: /var/log/pods
    presets:
      logsCollection:
        enabled: false # Enable/disable the collection of node's logs.
        storeCheckpoints: false # Store checkpoints for log collection, allowing for resumption from the last processed log.
    hostNetwork: true # Use the host's network namespace. This allows the daemon to access the network interfaces of the host directly.
    securityContext: # Run the daemon as the root user and group for proper metrics collection.
      runAsUser: 0
      runAsGroup: 0
    scrape_configs_file: "" # [Prometheus metrics](https://github.com/open-telemetry/opentelemetry-helm-charts/tree/main/charts/opentelemetry-kube-stack#scrape_configs_file-details)
    config:
      extensions:
        k8s_observer:
          observe_nodes: true
          observe_services: true
          observe_ingresses: true
      exporters:
        # [Debug exporter](https://github.com/open-telemetry/opentelemetry-collector/blob/main/exporter/debugexporter/README.md)
        debug:
          verbosity: basic
        otlp/gateway:
          endpoint: "http://opentelemetry-kube-stack-gateway-collector-headless:4317"
          tls:
            insecure: true
      processors:
        # [Batch Processor](https://github.com/open-telemetry/opentelemetry-collector/tree/main/processor/batchprocessor)
        batch: {} # inherit any values from helm chart
        batch/metrics:
          # explicitly set send_batch_max_size to 0, as splitting metrics requests may cause version_conflict_engine_exception in TSDB
          send_batch_max_size: 0
          timeout: 1s
        # [Resource Detection Processor](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/resourcedetectionprocessor)
        resourcedetection/eks:
          detectors: [env, eks] # Detects resources from environment variables and EKS (Elastic Kubernetes Service).
          timeout: 15s
          override: true
          eks:
            resource_attributes:
              k8s.cluster.name:
                enabled: true
        resourcedetection/gcp:
          detectors: [env, gcp] # Detects resources from environment variables and GCP (Google Cloud Platform).
          timeout: 2s
          override: true
        resourcedetection/aks:
          detectors: [env, aks] # Detects resources from environment variables and AKS (Azure Kubernetes Service).
          timeout: 2s
          override: true
          aks:
            resource_attributes:
              k8s.cluster.name:
                enabled: true
        resource/hostname:
          attributes:
            - key: host.name
              from_attribute: k8s.node.name
              action: upsert
        resource/environment:
          attributes:
            - key: deployment.environment.name
              from_attribute: service.namespace
              action: upsert
        resourcedetection/system:
          detectors: ["system", "ec2"] # Detects resources from the system and EC2 instances.
          system:
            hostname_sources: ["os"]
            resource_attributes:
              host.name:
                enabled: true
              host.id:
                enabled: false
              host.arch:
                enabled: true
              host.ip:
                enabled: true
              host.mac:
                enabled: true
              host.cpu.vendor.id:
                enabled: true
              host.cpu.family:
                enabled: true
              host.cpu.model.id:
                enabled: true
              host.cpu.model.name:
                enabled: true
              host.cpu.stepping:
                enabled: true
              host.cpu.cache.l2.size:
                enabled: true
              os.description:
                enabled: true
              os.type:
                enabled: true
          ec2:
            resource_attributes:
              host.name:
                enabled: false
              host.id:
                enabled: true
        resource/cloud:
          attributes:
            - key: cloud.instance.id
              from_attribute: host.id
              action: insert
        # [K8s Attributes Processor](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/k8sattributesprocessor)
        k8sattributes:
          filter:
            # Only retrieve pods running on the same node as the collector
            node_from_env_var: OTEL_K8S_NODE_NAME
          passthrough: false
          pod_association:
            # Below association takes a look at the k8s.pod.ip and k8s.pod.uid resource attributes or connection's context, and tries to match it with the pod having the same attribute.
            - sources:
                - from: resource_attribute
                  name: k8s.pod.ip
            - sources:
                - from: resource_attribute
                  name: k8s.pod.uid
            - sources:
                - from: connection
          extract:
            metadata:
              - "k8s.namespace.name"
              - "k8s.deployment.name"
              - "k8s.replicaset.name"
              - "k8s.statefulset.name"
              - "k8s.daemonset.name"
              - "k8s.cronjob.name"
              - "k8s.job.name"
              - "k8s.node.name"
              - "k8s.pod.name"
              - "k8s.pod.ip"
              - "k8s.pod.uid"
              - "k8s.pod.start_time"
              # Service attributes added based on https://opentelemetry.io/docs/specs/semconv/non-normative/k8s-attributes/#service-attributes
              - "service.name"
              - "service.version"
      receivers:
        # [OTLP Receiver](https://github.com/open-telemetry/opentelemetry-collector/tree/main/receiver/otlpreceiver)
        otlp:
          protocols:
            grpc:
              endpoint: 0.0.0.0:4317
            http:
              endpoint: 0.0.0.0:4318
        receiver_creator/logs:
          watch_observers: [k8s_observer]
          discovery:
            enabled: true
          default_annotations:
            io.opentelemetry.discovery.logs/enabled: "false"
          receivers: {}
      # [Service Section](https://opentelemetry.io/docs/collector/configuration/#service)
      service:
        extensions: [k8s_observer]
        pipelines:
          logs/node:
            receivers:
              - receiver_creator/logs
            processors:
              - batch
              - k8sattributes
              - resourcedetection/system
              - resourcedetection/eks
              - resourcedetection/gcp
              - resourcedetection/aks
              - resource/hostname
              - resource/environment
              - resource/cloud
            exporters:
              - otlp/gateway
          metrics/otel-apm:
            receivers:
              - otlp
            processors:
              - batch/metrics
              - resource/hostname
              - resource/environment
            exporters:
              - otlp/gateway
          logs/apm:
            receivers:
              - otlp
            processors:
              - batch
              - resource/hostname
              - resource/environment
            exporters:
              - otlp/gateway
          traces/apm:
            receivers:
              - otlp
            processors:
              - batch
              - resource/hostname
              - resource/environment
            exporters:
              - otlp/gateway
  #  Gateway is a K8s deployment EDOT collector focused on processing and
  #  forwarding telemetry to an Elasticsearch endpoint.
  gateway:
    fullnameOverride: "opentelemetry-kube-stack-gateway"
    resources:
      limits:
        cpu: 1500m
        memory: 1500Mi
      requests:
        cpu: 100m
        memory: 500Mi
    suffix: gateway
    replicas: 2
    enabled: true
    env:
      - name: ELASTIC_AGENT_OTEL
        value: '"true"'
      - name: ELASTIC_ENDPOINT
        valueFrom:
          secretKeyRef:
            name: elastic-secret-otel
            key: elastic_endpoint
      - name: ELASTIC_API_KEY
        valueFrom:
          secretKeyRef:
            name: elastic-secret-otel
            key: elastic_api_key
      - name: GOMAXPROCS
        valueFrom:
          resourceFieldRef:
            resource: limits.cpu
      - name: GOMEMLIMIT
        value: "1025MiB"
    config:
      connectors:
        routing:
          default_pipelines: [metrics/otel]
          error_mode: ignore
          table:
            - context: metric
              statement: route() where instrumentation_scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/kubeletstatsreceiver" or IsMatch(instrumentation_scope.name, "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/hostmetricsreceiver/internal/scraper/*")
              pipelines: [metrics/infra/ecs, metrics/otel]
        # [Elastic APM Connector](https://github.com/elastic/opentelemetry-collector-components/tree/main/connector/elasticapmconnector)
        elasticapm: {}
      receivers:
        otlp:
          protocols:
            grpc:
              endpoint: ${env:MY_POD_IP}:4317
            http:
              endpoint: ${env:MY_POD_IP}:4318
      processors:
        # [Elastic Infra Metrics Processor](https://github.com/elastic/opentelemetry-collector-components/tree/main/processor/elasticinframetricsprocessor)
        # DEPRECATED: The elasticinframetrics processor is deprecated and will be removed in 9.2.0.
        elasticinframetrics:
          add_system_metrics: true
          add_k8s_metrics: true
          drop_original: true
        # [Attributes Processor](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/attributesprocessor)
        attributes/dataset:
          actions:
            - key: event.dataset
              from_attribute: data_stream.dataset
              action: upsert
        resource/dataset_logs:
          attributes:
            - key: data_stream.dataset
              from_attribute: service.name
              action: upsert
        resource/process:
          attributes:
            - key: process.executable.name
              action: delete
            - key: process.executable.path
              action: delete
        batch:
          send_batch_size: 1000
          timeout: 1s
          send_batch_max_size: 1500
        batch/metrics:
          # explicitly set send_batch_max_size to 0, as splitting metrics requests may cause version_conflict_engine_exception in TSDB
          send_batch_max_size: 0
          timeout: 1s
        # [Elastic Trace Processor](https://github.com/elastic/opentelemetry-collector-components/tree/main/processor/elastictraceprocessor)
        elastictrace: {} # The processor enriches traces with elastic specific requirements.
      exporters:
        debug: {}
        # [Elasticsearch exporter](https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/elasticsearchexporter/README.md)
        elasticsearch/otel:
          endpoints: # List of Elasticsearch endpoints.
            - ${env:ELASTIC_ENDPOINT}
          api_key: ${env:ELASTIC_API_KEY} # API key for Elasticsearch authentication.
          # Enable in order to skip the SSL certificate Check
          # tls:
          #   insecure_skip_verify: true
          mapping:
            mode: otel
        elasticsearch/ecs:
          endpoints:
            - ${env:ELASTIC_ENDPOINT}
          api_key: ${env:ELASTIC_API_KEY}
          mapping:
            mode: ecs
      service:
        pipelines:
          metrics:
            receivers: [otlp]
            exporters: [routing]
          metrics/infra/ecs:
            receivers: [routing]
            processors:
              - elasticinframetrics
              - attributes/dataset
              - resource/process
              - batch/metrics
            exporters: [debug, elasticsearch/ecs]
          metrics/otel:
            receivers: [routing]
            processors: [batch]
            exporters: [debug, elasticsearch/otel]
          logs:
            receivers: [otlp]
            processors: [resource/dataset_logs, batch]
            exporters: [debug, elasticapm, elasticsearch/otel]
          traces:
            receivers: [otlp]
            processors: [batch, elastictrace]
            exporters: [debug, elasticapm, elasticsearch/otel]
          metrics/aggregated-otel-metrics:
            receivers:
              - elasticapm
            processors:
            exporters:
              - debug
              - elasticsearch/otel
# For more details on OpenTelemetry's zero-code instrumentation, see:
# https://opentelemetry.io/docs/concepts/instrumentation/zero-code/
instrumentation:
  name: elastic-instrumentation
  enabled: true # Enable/disable auto-instrumentation.
  exporter:
    endpoint: http://opentelemetry-kube-stack-daemon-collector.opentelemetry-operator-system.svc.cluster.local:4318 # The daemonset OpenTelemetry Collector endpoint where telemetry data will be exported.
  propagators:
    - tracecontext # W3C TraceContext propagator for distributed tracing.
    - baggage # Baggage propagator to include baggage information in trace context.
    - b3 # B3 propagator for Zipkin-based distributed tracing compatibility.
  sampler:
    type: parentbased_traceidratio # Sampler type
    argument: "1.0" # Sampling rate set to 100% (all traces are sampled).
  java:
    image: docker.elastic.co/observability/elastic-otel-javaagent:1.4.1
  nodejs:
    image: docker.elastic.co/observability/elastic-otel-node:1.1.1
  dotnet:
    image: docker.elastic.co/observability/elastic-otel-dotnet:1.0.2
  python:
    image: docker.elastic.co/observability/elastic-otel-python:1.3.0
  go:
    image: ghcr.io/open-telemetry/opentelemetry-go-instrumentation/autoinstrumentation-go:v0.22.0
