#!/bin/bash

####################################################################### STARTUP

# Function to retry a command with exponential backoff
retry_command() {
    local max_attempts=240
    local timeout=1
    local attempt=1
    local exit_code=0

    while [ $attempt -le $max_attempts ]
    do
        "$@"
        exit_code=$?

        if [ $exit_code -eq 0 ]; then
            break
        fi

        echo "Attempt $attempt failed! Retrying in $timeout seconds..."
        sleep $timeout
        attempt=$(( attempt + 1 ))
        #timeout=$(( timeout + 1 ))
    done

    if [ $exit_code -ne 0 ]; then
        echo "Command $@ failed after $attempt attempts!"
    fi

    return $exit_code
}

####################################################################### CODE

echo 'BACKLOAD_DATA=false' >> /root/.env
echo 'SOLVE_ALL=false' >> /root/.env
echo 'ERRORS_LATENCY=false' >> /root/.env
echo 'ERRORS_DB=true' >> /root/.env
echo 'DELETE_DATA=false' >> /root/.env

export $(cat /root/.env | xargs)
cd $WORKSPACE_DIR
git remote update
git pull

patch -i /workspace/src/trader/patch/remove_attributes.diff /workspace/src/trader/app.py
patch -i /workspace/src/trader/patch/remove_blrp.diff /workspace/src/trader/app.py
patch -i /workspace/src/recorder-java/patch/remove_bsp.diff /workspace/src/recorder-java/Dockerfile
patch -F 3 -i /workspace/src/recorder-java/patch/remove_blrp.diff /workspace/src/recorder-java/Dockerfile
docker compose build
docker compose up -d

echo "Wait for APM data to flow"
# Wait for the Kubernetes API server to become available
retry_command curl --silent --fail --output /dev/null http://localhost:9010/status/playback
