source /opt/workshops/elastic-retry.sh
export $(curl http://kubernetes-vm:9000/env | xargs)

# ------------- UPGRADE
kubectl delete Agent elastic-agent
kubectl delete Agent fleet-server

kubectl get Kibana -o yaml > kibana.yaml
cat kibana.yaml | sed 's|version: 9.1.0-SNAPSHOT|version: 9.1.0|' > kibana.new.yaml
kubectl apply -f kibana.new.yaml

kubectl get Elasticsearch -o yaml > elasticsearch.yaml
cat elasticsearch.yaml | sed 's|version: 9.1.0-SNAPSHOT|version: 9.1.0|' > elasticsearch.new.yaml
kubectl apply -f elasticsearch.new.yaml

# Wait for Elasticsearch to be created and ready
retry_command_lin check_es_health
retry_command_lin curl --silent --fail --output /dev/null -X GET -H "Authorization: Basic $ELASTICSEARCH_AUTH_BASE64" -H 'Content-Type: application/json' $ELASTICSEARCH_URL

# ------------- VIEW

/opt/workshops/elastic-view.sh -v oblt

# ------------- AI ASSISTANT

/opt/workshops/elastic-llm.sh -m gpt-4o-westus -k false -p false

echo "Initializing AI Assistant Everywhere"
init_ai_everywhere() {
    local http_status=$(curl -s -o /dev/null -w "%{http_code}" -X POST "$KIBANA_URL/internal/kibana/settings" \
    --header 'Content-Type: application/json' \
    --header "kbn-xsrf: true" \
    --header "Authorization: Basic $ELASTICSEARCH_AUTH_BASE64" \
    --header 'x-elastic-internal-origin: Kibana' \
    -d '{"changes":{"aiAssistant:preferredAIAssistantType":"observability"}}')

    if echo $http_status | grep -q '^2'; then
        echo "Elastic AI Assistant Everywhere successfully initialized: $http_status"
        return 0
    else
        echo "Failed to initialize Elastic AI Assistant Everywhere. HTTP status: $http_status"
        return 1
    fi
}
retry_command_lin init_ai_everywhere

# ------------- STREAMS

echo "Enable streams"
enable_streams() {
    local http_status=$(curl -s -o /dev/null -w "%{http_code}" -X POST "$KIBANA_URL/internal/kibana/settings" \
    --header 'Content-Type: application/json' \
    --header "kbn-xsrf: true" \
    --header "Authorization: Basic $ELASTICSEARCH_AUTH_BASE64" \
    --header 'x-elastic-internal-origin: Kibana' \
    -d '{"changes":{"observability:enableStreamsUI":true}}')

    if echo $http_status | grep -q '^2'; then
        echo "Enabled Streams: $http_status"
        return 0
    else
        echo "Failed to enable streams. HTTP status: $http_status"
        return 1
    fi
}
retry_command_lin enable_streams

# ------------- OTEL

output=$(curl -s -X POST --header "Authorization: Basic $ELASTICSEARCH_AUTH_BASE64"  -H 'Content-Type: application/json' "$ELASTICSEARCH_URL/_security/api_key" -d '
{
    "name": "kubernetes_otel_onboarding",
    "metadata": {
        "application": "logs",
        "managed": true
    },
    "role_descriptors": {
        "standalone_agent": {
            "cluster": [
            "monitor"
            ],
            "indices": [
            {
                "names": [
                "logs-*-*",
                "metrics-*-*",
                "traces-*-*"
                ],
                "privileges": [
                "auto_configure",
                "create_doc"
                ],
                "allow_restricted_indices": false
            }
            ],
            "applications": [],
            "run_as": [],
            "metadata": {},
            "transient_metadata": {
            "enabled": true
            }
        }
    }
}
')

ELASTICSEARCH_APIKEY=$(echo $output | jq -r '.encoded')

kubectl create namespace trading
kubectl create secret generic elastic-secret-otel \
  --namespace trading \
  --from-literal=elastic_endpoint=$ELASTICSEARCH_URL \
  --from-literal=elastic_api_key=$ELASTICSEARCH_APIKEY

# ------------- INDEX

index_orig=$(curl -s -X GET "$ELASTICSEARCH_URL/_component_template/logs@settings?flat_settings=true" \
    --header 'Content-Type: application/json' \
    --header "Authorization: Basic $ELASTICSEARCH_AUTH_BASE64")

index_orig_strip=$(echo $index_orig | jq --compact-output -r '.component_templates[0].component_template')

echo $index_orig_strip | jq --compact-output -r '.template.settings["index.refresh_interval"]="5s"' > index_new.json

index_new_put=$(curl -s -X PUT "$ELASTICSEARCH_URL/_component_template/logs@settings" \
    --header 'Content-Type: application/json' \
    --header "Authorization: Basic $ELASTICSEARCH_AUTH_BASE64" \
    -d @index_new.json)

echo $index_new_put

# ------------- MAPPING

map_orig=$(curl -s -X GET "$ELASTICSEARCH_URL/_component_template/otel@mappings?flat_settings=true" \
    --header 'Content-Type: application/json' \
    --header "Authorization: Basic $ELASTICSEARCH_AUTH_BASE64")

map_orig_strip=$(echo $map_orig | jq --compact-output -r '.component_templates[0].component_template')

echo $map_orig_strip | sed 's|{"template":{"mappings":{"dynamic":false|{"template":{"mappings":{"dynamic":true|' > map_new.json

map_new_put=$(curl -s -X PUT "$ELASTICSEARCH_URL/_component_template/otel@mappings" \
    --header 'Content-Type: application/json' \
    --header "Authorization: Basic $ELASTICSEARCH_AUTH_BASE64" \
    -d @map_new.json)

echo $map_new_put


# echo "Adding custom mappings"
# custom_mappings() {
#     local http_status=$(curl -s -o /dev/null -w "%{http_code}" -X PUT "$ELASTICSEARCH_URL/_component_template/logs-otel@custom" \
#     --header 'Content-Type: application/json' \
#     --header "Authorization: Basic $ELASTICSEARCH_AUTH_BASE64" \
#      -d'
#     {
#         "template": {
#             "mappings": {
#                 "properties": {
#                     "parsed": {
#                         "dynamic": true,
#                         "type": "object"
#                     }
#                 }
#             }
#         }
#     }')

#     if echo $http_status | grep -q '^2'; then
#         echo "Set custom mappings: $http_status"
#         return 0
#     else
#         echo "Failed to set custom mappings. HTTP status: $http_status"
#         return 1
#     fi
# }
# retry_command_lin custom_mappings

# ------------- OPENAI FOR ESQL

echo "Adding completion connector"
add_connector() {
    local http_status=$(curl -s -o /dev/null -w "%{http_code}" -X PUT "$ELASTICSEARCH_URL/_inference/completion/openai_completion" \
    --header 'Content-Type: application/json' \
    --header "Authorization: Basic $ELASTICSEARCH_AUTH_BASE64" -d'
    {
        "service": "openai",
        "service_settings": {
            "model_id": "gpt-4.1",
            "api_key": "'"$LLM_APIKEY"'",
            "url": "https://'"$LLM_PROXY_URL"'/v1/chat/completions"
        }
    }')

    if echo $http_status | grep -q '^2'; then
        echo "Connector added successfully with HTTP status: $http_status"
        return 0
    else
        echo "Failed to add connector. HTTP status: $http_status"
        return 1
    fi
}
retry_command_lin add_connector

# ------------- UA_LOOKUP ENRICHMENT

curl -X PUT "$ELASTICSEARCH_URL/ua_lookup" \
    --header 'Content-Type: application/json' \
    --header "Authorization: Basic $ELASTICSEARCH_AUTH_BASE64" \
    -d'
    {
        "settings": {"index": {"mode": "lookup"}},
        "mappings": {
            "properties": {
                "user_agent.full": { "type": "keyword" },
                "release_date": { "type": "date",
                "format": "MM/dd/YYYY"}
            }
        }
    }'

echo '
{"index":{}}
{"user_agent.full":"Chrome Mobile 126.0.6478.62","release_date": "03/18/2022"}
' > ua_lookup.ndjson

curl -X POST "$ELASTICSEARCH_URL/ua_lookup/_bulk" \
    --header 'Content-Type: application/x-ndjson' \
    --header "Authorization: Basic $ELASTICSEARCH_AUTH_BASE64" \
    --data-binary @ua_lookup.ndjson

# ------------- NETWORKS ENRICHMENT


curl -X PUT "$ELASTICSEARCH_URL/networks" \
    --header 'Content-Type: application/json' \
    --header "Authorization: Basic $ELASTICSEARCH_AUTH_BASE64" \
    -d'
    {
        "mappings": {
            "properties": {
                "range": { "type": "ip_range" },
                "isp": { "type": "keyword" }
            }
        }
    }'

echo '
{"index":{}}
{"range":"107.80.0.0/16","isp":"AT&T Enterprises, LLC"}
{"index":{}}
{"range":"186.189.224.0/20","isp":"NSS S.A."}
{"index":{}}
{"range":"149.254.212.0/24","isp":"T-Mobile(UK) Internet"}
{"index":{}}
{"range":"95.85.100.0/24","isp":"Turkmentelecom"}
{"index":{}}
{"range":"101.136.0.0/14","isp":"Asia Pacific Telecom"}
' > networks.ndjson

curl -X PUT "$ELASTICSEARCH_URL/_enrich/policy/networks-policy" \
    --header 'Content-Type: application/json' \
    --header "Authorization: Basic $ELASTICSEARCH_AUTH_BASE64" \
    -d'
    {
        "range": {
            "indices": "networks",
            "match_field": "range",
            "enrich_fields": ["isp"]
        }
    }'

curl -X POST "$ELASTICSEARCH_URL/networks/_bulk" \
    --header 'Content-Type: application/x-ndjson' \
    --header "Authorization: Basic $ELASTICSEARCH_AUTH_BASE64" \
    --data-binary @networks.ndjson

curl -X POST "$ELASTICSEARCH_URL/_enrich/policy/networks-policy/_execute?wait_for_completion=true" \
    --header 'Content-Type: application/json' \
    --header "Authorization: Basic $ELASTICSEARCH_AUTH_BASE64"


# ------------- RBAC

cat <<EOF >> rbac.json
{
  "cluster": [],
  "indices": [
    {
      "names": [
        "logs-proxy.otel-default"
      ],
      "privileges": [
        "read",
        "view_index_metadata"
      ],
      "field_security": {
        "grant": [
          "*"
        ],
        "except": [
          "client.ip","body.text"
        ]
      },
      "allow_restricted_indices": false
    },
    {
      "names": [
        "/~(([.]|ilm-history-).*)/"
      ],
      "privileges": [
        "read",
        "view_index_metadata"
      ],
      "allow_restricted_indices": false
    },
    {
      "names": [
        ".slo-observability.*"
      ],
      "privileges": [
        "read",
        "view_index_metadata"
      ],
      "allow_restricted_indices": false
    },
    {
      "names": [
        ".siem-signals*",
        ".lists-*",
        ".items-*",
        ".reindexed-v8-siem-signals*",
        ".reindexed-v8-lists-*",
        ".reindexed-v8-items-*"
      ],
      "privileges": [
        "read",
        "view_index_metadata"
      ],
      "allow_restricted_indices": false
    },
    {
      "names": [
        ".alerts*",
        ".preview.alerts*",
        ".adhoc.alerts*"
      ],
      "privileges": [
        "read",
        "view_index_metadata"
      ],
      "allow_restricted_indices": false
    },
    {
      "names": [
        "profiling-*",
        ".profiling-*"
      ],
      "privileges": [
        "read",
        "view_index_metadata"
      ],
      "allow_restricted_indices": false
    }
  ],
  "applications": [
    {
      "application": "kibana-.kibana",
      "privileges": [
        "read"
      ],
      "resources": [
        "*"
      ]
    }
  ],
  "run_as": [],
  "description": "Grants read-only access to all features in Kibana (including Solutions) and to data indices."
}
EOF

curl -X POST "$ELASTICSEARCH_URL/_security/role/limited_viewer" \
    --header 'Content-Type: application/json' \
    --header "Authorization: Basic $ELASTICSEARCH_AUTH_BASE64" \
    -d @rbac.json

curl -X PUT "$ELASTICSEARCH_URL/_security/user/limited_user" \
    --header 'Content-Type: application/json' \
    --header "Authorization: Basic $ELASTICSEARCH_AUTH_BASE64" \
    -d'
    {
        "password": "elastic",
        "roles": [
          "limited_viewer"
        ],
        "full_name": "",
        "email": "",
        "metadata": {},
        "enabled": true
    }'

# ------------- CODE

mkdir -p /workspace/workshop
git clone https://github.com/ty-elastic/k8s-otel-finance.git /workspace/workshop
cd /workspace/workshop
git checkout $INSTRUQT_TRACK_SLUG

# ------------- DEPLOY

./deploy.sh -s trading-logen -o false -c $INSTRUQT_TRACK_SLUG -v $INSTRUQT_TRACK_SLUG

# ------------- WAIT

retry_command_lin curl --silent --fail --output /dev/null --header "Authorization: Basic $ELASTICSEARCH_AUTH_BASE64" "$ELASTICSEARCH_URL/_cat/indices/logs-proxy.otel-default?allow_no_indices=false"

curl -X POST "$ELASTICSEARCH_URL/logs-proxy.otel-default/_rollover" \
    --header 'Content-Type: application/json' \
    --header "Authorization: Basic $ELASTICSEARCH_AUTH_BASE64"

curl -X POST "$KIBANA_URL/api/data_views/data_view" \
    --header 'Content-Type: application/json' \
    --header "kbn-xsrf: true" \
    --header "Authorization: Basic $ELASTICSEARCH_AUTH_BASE64" \
    -d'
    {
      "data_view": {
        "namespaces": [
          "default"
        ],
        "title": "logs-proxy.otel-default",
        "name": "logs-proxy.otel-default"
      }
    }'

echo "Wait for realtime"
retry_command_lin curl --silent --fail --output /dev/null http://kubernetes-vm:32003/status/realtime
