--- ../app.py	2025-07-14 20:43:38
+++ o11y--course--field--200-otel-logs--main/init-app.py	2025-07-15 05:31:02
@@ -9,9 +9,14 @@
 import requests
 from werkzeug.middleware.proxy_fix import ProxyFix
 
+from opentelemetry import trace, baggage, context
+from opentelemetry.processor.baggage import BaggageSpanProcessor, ALLOW_ALL_BAGGAGE_KEYS
+
+ATTRIBUTE_PREFIX = "com.example"
+
 app = Flask(__name__)
 app.logger.setLevel(logging.INFO)
-app.logger.info(f"variant: default")
+app.logger.info(f"variant: o11y--course--field--200-otel-logs--main")
 
  # Apply ProxyFix to correctly handle X-Forwarded-For
 # x_for=1 indicates that one proxy is setting the X-Forwarded-For header
@@ -20,6 +25,19 @@
 
 import model
 
+def init_otel(): 
+    try:
+        trace.get_tracer_provider().add_span_processor(BaggageSpanProcessor(ALLOW_ALL_BAGGAGE_KEYS))
+    except:
+        pass
+init_otel()
+
+def set_attribute_and_baggage(key, value):
+    # always set it on the current span
+    trace.get_current_span().set_attribute(key, value)
+    # and attach it to baggage
+    context.attach(baggage.set_baggage(key, value))
+
 def conform_request_bool(value):
     return value.lower() == 'true'
 
@@ -36,20 +54,28 @@
     trade_id = str(uuid.uuid4())
 
     customer_id = request.args.get('customer_id', default=None, type=str)
+    set_attribute_and_baggage(f"{ATTRIBUTE_PREFIX}.customer_id", customer_id)
 
     day_of_week = request.args.get('day_of_week', default=None, type=str)
     if day_of_week is None:
         day_of_week = random.choice(['M', 'Tu', 'W', 'Th', 'F'])
+    set_attribute_and_baggage(f"{ATTRIBUTE_PREFIX}.day_of_week", day_of_week)
 
     region = request.args.get('region', default="NA", type=str)
+    set_attribute_and_baggage(f"{ATTRIBUTE_PREFIX}.region", region)
 
     symbol = request.args.get('symbol', default='ESTC', type=str)
+    set_attribute_and_baggage(f"{ATTRIBUTE_PREFIX}.symbol", symbol)
 
     data_source = request.args.get('data_source', default='monkey', type=str)
+    set_attribute_and_baggage(f"{ATTRIBUTE_PREFIX}.data_source", data_source)
 
     classification = request.args.get('classification', default=None, type=str)
+    if classification is not None:
+        set_attribute_and_baggage(f"{ATTRIBUTE_PREFIX}.classification", classification)
 
     canary = request.args.get('canary', default="false", type=str)
+    set_attribute_and_baggage(f"{ATTRIBUTE_PREFIX}.canary", canary)
 
     # forced errors
     latency_amount = request.args.get('latency_amount', default=0, type=float)
